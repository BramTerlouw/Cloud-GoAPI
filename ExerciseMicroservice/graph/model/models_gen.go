// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Answer struct {
	Value   string `json:"value"`
	Correct bool   `json:"correct"`
}

type AnswerInput struct {
	Value   string `json:"value"`
	Correct bool   `json:"correct"`
}

type Exercise struct {
	ID          string        `json:"id"`
	ClassID     string        `json:"class_Id"`
	ModuleID    string        `json:"module_id"`
	Name        string        `json:"name"`
	Question    string        `json:"question"`
	Answers     []*Answer     `json:"answers"`
	Difficulty  LanguageLevel `json:"difficulty"`
	CreatedAt   string        `json:"created_at"`
	UpdatedAt   string        `json:"updated_at"`
	SoftDeleted bool          `json:"soft_deleted"`
	MadeBy      string        `json:"made_by"`
}

type ExerciseFilter struct {
	Name       *string        `json:"name,omitempty"`
	SoftDelete *bool          `json:"softDelete,omitempty"`
	Difficulty *LanguageLevel `json:"difficulty,omitempty"`
	ClassID    *string        `json:"class_Id,omitempty"`
	ModuleID   *string        `json:"module_id,omitempty"`
	MadeBy     *string        `json:"made_by,omitempty"`
}

type ExerciseInfo struct {
	ID         string        `json:"id"`
	ClassID    string        `json:"class_Id"`
	ModuleID   string        `json:"module_id"`
	Name       string        `json:"name"`
	Question   string        `json:"question"`
	Answers    []*Answer     `json:"answers"`
	Difficulty LanguageLevel `json:"difficulty"`
	MadeBy     string        `json:"made_by"`
}

type ExerciseInput struct {
	ClassID    string         `json:"class_Id"`
	ModuleID   string         `json:"module_id"`
	Name       string         `json:"name"`
	Question   string         `json:"question"`
	Answers    []*AnswerInput `json:"answers"`
	Difficulty LanguageLevel  `json:"difficulty"`
}

type Paginator struct {
	Amount int `json:"amount"`
	Step   int `json:"Step"`
}

type LanguageLevel string

const (
	LanguageLevelA1 LanguageLevel = "A1"
	LanguageLevelA2 LanguageLevel = "A2"
	LanguageLevelB1 LanguageLevel = "B1"
	LanguageLevelB2 LanguageLevel = "B2"
	LanguageLevelC1 LanguageLevel = "C1"
	LanguageLevelC2 LanguageLevel = "C2"
)

var AllLanguageLevel = []LanguageLevel{
	LanguageLevelA1,
	LanguageLevelA2,
	LanguageLevelB1,
	LanguageLevelB2,
	LanguageLevelC1,
	LanguageLevelC2,
}

func (e LanguageLevel) IsValid() bool {
	switch e {
	case LanguageLevelA1, LanguageLevelA2, LanguageLevelB1, LanguageLevelB2, LanguageLevelC1, LanguageLevelC2:
		return true
	}
	return false
}

func (e LanguageLevel) String() string {
	return string(e)
}

func (e *LanguageLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LanguageLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LanguageLevel", str)
	}
	return nil
}

func (e LanguageLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
