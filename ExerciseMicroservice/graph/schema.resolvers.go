package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"ExerciseMicroservice/graph/model"
	"ExerciseMicroservice/internal/auth"
	"ExerciseMicroservice/internal/helper"
	"context"
)

// CreateExercise is the resolver for the CreateExercise field.
func (r *mutationResolver) CreateExercise(ctx context.Context, exercise model.ExerciseInput) (*model.Exercise, error) {
	token := auth.TokenFromContext(ctx)

	createdExercise, err := r.Service.CreateExercise(token, exercise)
	if err != nil {
		return nil, err
	}

	return createdExercise, nil
}

// UpdateExercise is the resolver for the UpdateExercise field.
func (r *mutationResolver) UpdateExercise(ctx context.Context, id string, exercise model.ExerciseInput) (*model.Exercise, error) {
	token := auth.TokenFromContext(ctx)

	updatedExercise, err := r.Service.UpdateExercise(token, id, exercise)
	if err != nil {
		return nil, err
	}

	return updatedExercise, nil
}

// DeleteExercise is the resolver for the DeleteExercise field.
func (r *mutationResolver) DeleteExercise(ctx context.Context, exerciseID string) (*string, error) {
	token := auth.TokenFromContext(ctx)

	err := r.Service.DeleteExercise(token, exerciseID)
	if err != nil {
		return nil, err
	}

	return helper.StringPointer(exerciseID), nil
}

// GetExercise is the resolver for the GetExercise field.
func (r *queryResolver) GetExercise(ctx context.Context, exerciseID string) (*model.Exercise, error) {
	token := auth.TokenFromContext(ctx)

	exercise, err := r.Service.GetExerciseById(token, exerciseID)
	if err != nil {
		return nil, err
	}

	return exercise, nil
}

// ListExercise is the resolver for the ListExercise field.
func (r *queryResolver) ListExercise(ctx context.Context, filter model.ExerciseFilter, paginator model.Paginator) ([]*model.ExerciseInfo, error) {
	token := auth.TokenFromContext(ctx)

	exercises, err := r.Service.ListExercises(token, &filter, &paginator)
	if err != nil {
		return nil, err
	}

	return exercises, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
