// Code generated by protoc-gen-go-grpcServers. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpcServers v1.2.0
// - protoc             v4.24.4
// source: resultProto.proto

package result

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcServers package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcResultClient is the client API for GrpcResult service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcResultClient interface {
	Delete(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*Result, error)
	SoftDelete(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*Result, error)
}

type grpcResultClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcResultClient(cc grpc.ClientConnInterface) GrpcResultClient {
	return &grpcResultClient{cc}
}

func (c *grpcResultClient) Delete(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/GrpcResult/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcResultClient) SoftDelete(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/GrpcResult/SoftDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcResultServer is the server API for GrpcResult service.
// All implementations must embed UnimplementedGrpcResultServer
// for forward compatibility
type GrpcResultServer interface {
	Delete(context.Context, *ResultRequest) (*Result, error)
	SoftDelete(context.Context, *ResultRequest) (*Result, error)
	mustEmbedUnimplementedGrpcResultServer()
}

// UnimplementedGrpcResultServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcResultServer struct {
}

func (UnimplementedGrpcResultServer) Delete(context.Context, *ResultRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGrpcResultServer) SoftDelete(context.Context, *ResultRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftDelete not implemented")
}
func (UnimplementedGrpcResultServer) mustEmbedUnimplementedGrpcResultServer() {}

// UnsafeGrpcResultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcResultServer will
// result in compilation errors.
type UnsafeGrpcResultServer interface {
	mustEmbedUnimplementedGrpcResultServer()
}

func RegisterGrpcResultServer(s grpc.ServiceRegistrar, srv GrpcResultServer) {
	s.RegisterService(&GrpcResult_ServiceDesc, srv)
}

func _GrpcResult_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcResultServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcResult/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcResultServer).Delete(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcResult_SoftDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcResultServer).SoftDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcResult/SoftDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcResultServer).SoftDelete(ctx, req.(*ResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcResult_ServiceDesc is the grpcServers.ServiceDesc for GrpcResult service.
// It's only intended for direct use with grpcServers.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcResult_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcResult",
	HandlerType: (*GrpcResultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _GrpcResult_Delete_Handler,
		},
		{
			MethodName: "SoftDelete",
			Handler:    _GrpcResult_SoftDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resultProto.proto",
}
