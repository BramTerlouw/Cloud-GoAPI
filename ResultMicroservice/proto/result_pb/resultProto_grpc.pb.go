// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: resultProto.proto

package result_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcResultClient is the client API for GrpcResult service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcResultClient interface {
	DeleteByModule(ctx context.Context, in *DeleteByModuleRequest, opts ...grpc.CallOption) (*Response, error)
	SoftDeleteByModule(ctx context.Context, in *DeleteByModuleRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteByClass(ctx context.Context, in *DeleteByClassRequest, opts ...grpc.CallOption) (*Response, error)
	SoftDeleteByClass(ctx context.Context, in *DeleteByClassRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteByUser(ctx context.Context, in *DeleteByUserRequest, opts ...grpc.CallOption) (*Response, error)
	SoftDeleteByUser(ctx context.Context, in *DeleteByUserRequest, opts ...grpc.CallOption) (*Response, error)
}

type grpcResultClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcResultClient(cc grpc.ClientConnInterface) GrpcResultClient {
	return &grpcResultClient{cc}
}

func (c *grpcResultClient) DeleteByModule(ctx context.Context, in *DeleteByModuleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcResult/DeleteByModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcResultClient) SoftDeleteByModule(ctx context.Context, in *DeleteByModuleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcResult/SoftDeleteByModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcResultClient) DeleteByClass(ctx context.Context, in *DeleteByClassRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcResult/DeleteByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcResultClient) SoftDeleteByClass(ctx context.Context, in *DeleteByClassRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcResult/SoftDeleteByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcResultClient) DeleteByUser(ctx context.Context, in *DeleteByUserRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcResult/DeleteByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcResultClient) SoftDeleteByUser(ctx context.Context, in *DeleteByUserRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/GrpcResult/SoftDeleteByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcResultServer is the server API for GrpcResult service.
// All implementations must embed UnimplementedGrpcResultServer
// for forward compatibility
type GrpcResultServer interface {
	DeleteByModule(context.Context, *DeleteByModuleRequest) (*Response, error)
	SoftDeleteByModule(context.Context, *DeleteByModuleRequest) (*Response, error)
	DeleteByClass(context.Context, *DeleteByClassRequest) (*Response, error)
	SoftDeleteByClass(context.Context, *DeleteByClassRequest) (*Response, error)
	DeleteByUser(context.Context, *DeleteByUserRequest) (*Response, error)
	SoftDeleteByUser(context.Context, *DeleteByUserRequest) (*Response, error)
	mustEmbedUnimplementedGrpcResultServer()
}

// UnimplementedGrpcResultServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcResultServer struct {
}

func (UnimplementedGrpcResultServer) DeleteByModule(context.Context, *DeleteByModuleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByModule not implemented")
}
func (UnimplementedGrpcResultServer) SoftDeleteByModule(context.Context, *DeleteByModuleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftDeleteByModule not implemented")
}
func (UnimplementedGrpcResultServer) DeleteByClass(context.Context, *DeleteByClassRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByClass not implemented")
}
func (UnimplementedGrpcResultServer) SoftDeleteByClass(context.Context, *DeleteByClassRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftDeleteByClass not implemented")
}
func (UnimplementedGrpcResultServer) DeleteByUser(context.Context, *DeleteByUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByUser not implemented")
}
func (UnimplementedGrpcResultServer) SoftDeleteByUser(context.Context, *DeleteByUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftDeleteByUser not implemented")
}
func (UnimplementedGrpcResultServer) mustEmbedUnimplementedGrpcResultServer() {}

// UnsafeGrpcResultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcResultServer will
// result in compilation errors.
type UnsafeGrpcResultServer interface {
	mustEmbedUnimplementedGrpcResultServer()
}

func RegisterGrpcResultServer(s grpc.ServiceRegistrar, srv GrpcResultServer) {
	s.RegisterService(&GrpcResult_ServiceDesc, srv)
}

func _GrpcResult_DeleteByModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcResultServer).DeleteByModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcResult/DeleteByModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcResultServer).DeleteByModule(ctx, req.(*DeleteByModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcResult_SoftDeleteByModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcResultServer).SoftDeleteByModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcResult/SoftDeleteByModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcResultServer).SoftDeleteByModule(ctx, req.(*DeleteByModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcResult_DeleteByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcResultServer).DeleteByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcResult/DeleteByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcResultServer).DeleteByClass(ctx, req.(*DeleteByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcResult_SoftDeleteByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcResultServer).SoftDeleteByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcResult/SoftDeleteByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcResultServer).SoftDeleteByClass(ctx, req.(*DeleteByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcResult_DeleteByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcResultServer).DeleteByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcResult/DeleteByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcResultServer).DeleteByUser(ctx, req.(*DeleteByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcResult_SoftDeleteByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcResultServer).SoftDeleteByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GrpcResult/SoftDeleteByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcResultServer).SoftDeleteByUser(ctx, req.(*DeleteByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcResult_ServiceDesc is the grpc.ServiceDesc for GrpcResult service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcResult_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcResult",
	HandlerType: (*GrpcResultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteByModule",
			Handler:    _GrpcResult_DeleteByModule_Handler,
		},
		{
			MethodName: "SoftDeleteByModule",
			Handler:    _GrpcResult_SoftDeleteByModule_Handler,
		},
		{
			MethodName: "DeleteByClass",
			Handler:    _GrpcResult_DeleteByClass_Handler,
		},
		{
			MethodName: "SoftDeleteByClass",
			Handler:    _GrpcResult_SoftDeleteByClass_Handler,
		},
		{
			MethodName: "DeleteByUser",
			Handler:    _GrpcResult_DeleteByUser_Handler,
		},
		{
			MethodName: "SoftDeleteByUser",
			Handler:    _GrpcResult_SoftDeleteByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resultProto.proto",
}
