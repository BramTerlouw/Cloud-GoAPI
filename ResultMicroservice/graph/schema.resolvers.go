package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"ResultMicroservice/graph/model"
	"context"
	"fmt"
)

// CreateResult is the resolver for the CreateResult field.
func (r *mutationResolver) CreateResult(ctx context.Context, input model.InputResult) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: CreateResult - CreateResult"))
}

// UpdateResult is the resolver for the UpdateResult field.
func (r *mutationResolver) UpdateResult(ctx context.Context, id string, input model.InputResult) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: UpdateResult - UpdateResult"))
}

// DeleteResult is the resolver for the DeleteResult field.
func (r *mutationResolver) DeleteResult(ctx context.Context, id string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: DeleteResult - DeleteResult"))
}

// GetResultByExercise is the resolver for the GetResultByExercise field.
func (r *queryResolver) GetResultByExercise(ctx context.Context, exerciseID string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: GetResultByExercise - GetResultByExercise"))
}

// GetResultsByClass is the resolver for the GetResultsByClass field.
func (r *queryResolver) GetResultsByClass(ctx context.Context, classID string) ([]*model.Result, error) {
	panic(fmt.Errorf("not implemented: GetResultsByClass - GetResultsByClass"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
