package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"school/graph/model"
	"school/internal/auth"
)

// CreateSchool is the resolver for the createSchool field.
func (r *mutationResolver) CreateSchool(ctx context.Context, input model.SchoolInput) (*model.School, error) {
	token := auth.TokenFromContext(ctx)

	school, err := r.Service.CreateSchool(token, input)
	if err != nil {
		return nil, err
	}

	return school, nil
}

// UpdateSchool is the resolver for the updateSchool field.
func (r *mutationResolver) UpdateSchool(ctx context.Context, id string, input model.SchoolInput) (*model.School, error) {
	token := auth.TokenFromContext(ctx)

	school, err := r.Service.UpdateSchool(token, id, input)
	if err != nil {
		return nil, err
	}

	return school, nil
}

// GetSchool is the resolver for the getSchool field.
func (r *queryResolver) GetSchool(ctx context.Context, id string) (*model.School, error) {
	token := auth.TokenFromContext(ctx)

	school, err := r.Service.GetSchoolById(token, id)
	if err != nil {
		return nil, err
	}

	return school, nil
}

// ListSchools is the resolver for the listSchools field.
func (r *queryResolver) ListSchools(ctx context.Context, filter *model.ListSchoolFilter, paginate *model.Paginator) ([]*model.SchoolInfo, error) {
	token := auth.TokenFromContext(ctx)

	schools, err := r.Service.ListSchools(token, filter, paginate)
	if err != nil {
		return nil, err
	}

	return schools, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
