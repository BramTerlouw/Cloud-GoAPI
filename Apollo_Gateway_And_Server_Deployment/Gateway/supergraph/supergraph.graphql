schema
@link(url: "https://specs.apollo.dev/link/v1.0")
@link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
    query: Query,
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
    CLASSES @join__graph(name: "classes", url: "http://class-microservice-service:8082/query")
    SCHOOLES @join__graph(name: "schooles", url: "http://school-microservice-service:8083/query")
}

#enum join__Graph {
#PRODUCTS @join__graph(name: "products", url: "http://apollo-subgraph-products-service:8080/query")
#CUSTOMERS @join__graph(name: "customers", url: "http://apollo-subgraph-customers-service:8081/query")
#}

scalar link__Import

enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
}

#type Product
#@join__type(graph: PRODUCTS, key: "id")
#{
#    id: String!
#    name: String! @join__field(graph: PRODUCTS)
#    price: Int @join__field(graph: PRODUCTS)
#}
#
#type Customer
#@join__type(graph: CUSTOMERS, key: "id")
#{
#    id: String!
#    name: String! @join__field(graph: CUSTOMERS)
#    email: String! @join__field(graph: CUSTOMERS)
#}
#
#type Query
#@join__type(graph: CUSTOMERS)
#@join__type(graph: PRODUCTS)
#{
#    topProducts(first: Int = 5): [Product] @join__field(graph: PRODUCTS)
#    topCustomers(first: Int = 5): [Customer] @join__field(graph: CUSTOMERS)
#}

type Class
@join__type(graph: CLASSES, key: "id")
{
    id: ID!
    module_Id: ID! @join__field(graph: CLASSES)
    name: String! @join__field(graph: CLASSES)
    description: String @join__field(graph: CLASSES)
    difficulty: Int @join__field(graph: CLASSES)
    created_at: String @join__field(graph: CLASSES)
    updated_at: String @join__field(graph: CLASSES)
    soft_deleted: Boolean @join__field(graph: CLASSES)
}

type School
@join__type(graph: SCHOOLES, key: "id")
{
    id: ID!
    name: String!
    location: String
    created_at: String
    updated_at: String
    soft_deleted: Boolean
}

input ClassInput
@join__type(graph: CLASSES)
{
    module_Id: ID!
    name: String!
    description: String
    difficulty: Int
}

input SchoolInput
@join__type(graph: SCHOOLES)
{
    name: String!
    location: String
}

type Query
@join__type(graph: CLASSES)
@join__type(graph: SCHOOLES)
{
    getClass(id: ID!): Class @join__field(graph: CLASSES)
    listClasses: [Class] @join__field(graph: CLASSES)
    getSchool(id: ID!): School @join__field(graph: SCHOOLES)
    listSchools: [School] @join__field(graph: SCHOOLES)
}

type Mutation
@join__type(graph: CLASSES)
@join__type(graph: SCHOOLES)
{
    createClass(input: ClassInput!): Class @join__field(graph: CLASSES)
    updateClass(id: ID!, input: ClassInput!): Class @join__field(graph: CLASSES)
    deleteClass(id: ID!): ID @join__field(graph: CLASSES)
    createSchool(input: SchoolInput!): School @join__field(graph: SCHOOLES)
    updateSchool(id: ID!, input: SchoolInput!): School @join__field(graph: SCHOOLES)
    deleteSchool(id: ID!): ID @join__field(graph: SCHOOLES)
}