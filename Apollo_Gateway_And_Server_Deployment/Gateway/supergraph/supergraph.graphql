schema
@link(url: "https://specs.apollo.dev/link/v1.0")
@link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
    query: Query,
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
PRODUCTS @join__graph(name: "products", url: "http://subgraph-products-service:8080/query")
CUSTOMERS @join__graph(name: "customers", url: "http://subgraph-customers-service:8081/query")
}

scalar link__Import

enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
}

type Product
@join__type(graph: PRODUCTS, key: "id")
{
    id: String!
    name: String! @join__field(graph: PRODUCTS)
    price: Int @join__field(graph: PRODUCTS)
}

type Customer
@join__type(graph: CUSTOMERS, key: "id")
{
    id: String!
    name: String! @join__field(graph: CUSTOMERS)
    email: String! @join__field(graph: CUSTOMERS)
}

type Query
@join__type(graph: CUSTOMERS)
@join__type(graph: PRODUCTS)
{
    topProducts(first: Int = 5): [Product] @join__field(graph: PRODUCTS)
    topCustomers(first: Int = 5): [Customer] @join__field(graph: CUSTOMERS)
}

