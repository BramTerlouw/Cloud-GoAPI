schema
@link(url: "https://specs.apollo.dev/link/v1.0")
@link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
    query: Query,
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
    MODULES @join__graph(name: "modules", url: "http://module-microservice-service:8081/query")
    CLASSES @join__graph(name: "classes", url: "http://class-microservice-service:8082/query")
    SCHOOLS @join__graph(name: "schools", url: "http://school-microservice-service:8083/query")
}

scalar link__Import

enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
}

type Module
@join__type(graph: MODULES, key: "id")
{
    id: ID!
    name: String! @join__field(graph: MODULES)
    description: String! @join__field(graph: MODULES)
    difficulty: Int! @join__field(graph: MODULES)
    category: String! @join__field(graph: MODULES)
    made_by: String! @join__field(graph: MODULES)
    private: Boolean! @join__field(graph: MODULES)
    key: String @join__field(graph: MODULES)
    created_at: String @join__field(graph: MODULES)
    updated_at: String @join__field(graph: MODULES)
    soft_deleted: Boolean @join__field(graph: MODULES)
}

type ModuleInfo
@join__type(graph: MODULES, key: "id")
{
    id: ID!
    name: String! @join__field(graph: MODULES)
    description: String! @join__field(graph: MODULES)
    difficulty: Int! @join__field(graph: MODULES)
    category: String! @join__field(graph: MODULES)
    made_by: String! @join__field(graph: MODULES)
    private: Boolean! @join__field(graph: MODULES)
}

type Class
@join__type(graph: CLASSES, key: "id")
{
    id: ID!
    module_Id: ID! @join__field(graph: CLASSES)
    name: String! @join__field(graph: CLASSES)
    description: String! @join__field(graph: CLASSES)
    difficulty: Int! @join__field(graph: CLASSES)
    made_by: String! @join__field(graph: CLASSES)
    created_at: String @join__field(graph: CLASSES)
    updated_at: String @join__field(graph: CLASSES)
    soft_deleted: Boolean @join__field(graph: CLASSES)
}

type ClassInfo
@join__type(graph: CLASSES, key: "id")
{
    id: ID!
    module_Id: ID! @join__field(graph: CLASSES)
    name: String! @join__field(graph: CLASSES)
    description: String! @join__field(graph: CLASSES)
    difficulty: Int! @join__field(graph: CLASSES)
    made_by: String! @join__field(graph: CLASSES)
}

type School
@join__type(graph: SCHOOLS, key: "id")
{
    id: ID!
    name: String! @join__field(graph: SCHOOLS)
    location: String! @join__field(graph: SCHOOLS)
    made_by: ID! @join__field(graph: SCHOOLS)
    created_at: String @join__field(graph: SCHOOLS)
    updated_at: String @join__field(graph: SCHOOLS)
    soft_deleted: Boolean @join__field(graph: SCHOOLS)
}

type SchoolInfo
@join__type(graph: SCHOOLS, key: "id")
{
    id: ID! @join__field(graph: SCHOOLS)
    name: String! @join__field(graph: SCHOOLS)
    location: String! @join__field(graph: SCHOOLS)
    made_by: ID! @join__field(graph: SCHOOLS)
}

input ModuleInput
@join__type(graph: MODULES)
{
    name: String!
    description: String!
    difficulty: Int!
    category: String!
    private: Boolean!
    key: String
}

input ClassInput
@join__type(graph: CLASSES)
{
    module_Id: ID!
    name: String!
    description: String!
    difficulty: Int!
}

input SchoolInput
@join__type(graph: SCHOOLS)
{
    name: String!
    location: String!
}

input Filter
@join__type(graph: MODULES)
@join__type(graph: CLASSES)
@join__type(graph: SCHOOLS)
{
    softDelete: Boolean
}

type Query
@join__type(graph: MODULES)
@join__type(graph: CLASSES)
@join__type(graph: SCHOOLS)
{
    getModule(id: ID!): Module @join__field(graph: MODULES)
    listModules: [ModuleInfo] @join__field(graph: MODULES)
    getClass(id: ID!): Class @join__field(graph: CLASSES)
    listClasses: [ClassInfo] @join__field(graph: CLASSES)
    getSchool(id: ID!): School @join__field(graph: SCHOOLS)
    listSchools: [SchoolInfo] @join__field(graph: SCHOOLS)
}

type Mutation
@join__type(graph: MODULES)
@join__type(graph: CLASSES)
@join__type(graph: SCHOOLS)
{
    createModule(input: ModuleInput!): Module @join__field(graph: MODULES)
    updateModule(id: ID!, input: ModuleInput!): Module @join__field(graph: MODULES)
    deleteModule(id: ID!, filter: Filter): ID @join__field(graph: MODULES)
    createClass(input: ClassInput!): Class @join__field(graph: CLASSES)
    updateClass(id: ID!, input: ClassInput!): Class @join__field(graph: CLASSES)
    deleteClass(id: ID!, filter: Filter): ID @join__field(graph: CLASSES)
    createSchool(input: SchoolInput!): School @join__field(graph: SCHOOLS)
    updateSchool(id: ID!, input: SchoolInput!): School @join__field(graph: SCHOOLS)
    deleteSchool(id: ID!, filter: Filter): ID @join__field(graph: SCHOOLS)
}