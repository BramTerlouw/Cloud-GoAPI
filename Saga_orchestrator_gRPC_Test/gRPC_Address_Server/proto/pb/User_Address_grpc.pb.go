// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: User_Address.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPC_User_ServerClient is the client API for GRPC_User_Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPC_User_ServerClient interface {
	// RPC method to get user information
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type gRPC_User_ServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPC_User_ServerClient(cc grpc.ClientConnInterface) GRPC_User_ServerClient {
	return &gRPC_User_ServerClient{cc}
}

func (c *gRPC_User_ServerClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/proto.gRPC_User_Server/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPC_User_ServerServer is the server API for GRPC_User_Server service.
// All implementations must embed UnimplementedGRPC_User_ServerServer
// for forward compatibility
type GRPC_User_ServerServer interface {
	// RPC method to get user information
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	mustEmbedUnimplementedGRPC_User_ServerServer()
}

// UnimplementedGRPC_User_ServerServer must be embedded to have forward compatible implementations.
type UnimplementedGRPC_User_ServerServer struct {
}

func (UnimplementedGRPC_User_ServerServer) GetUser(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedGRPC_User_ServerServer) mustEmbedUnimplementedGRPC_User_ServerServer() {}

// UnsafeGRPC_User_ServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPC_User_ServerServer will
// result in compilation errors.
type UnsafeGRPC_User_ServerServer interface {
	mustEmbedUnimplementedGRPC_User_ServerServer()
}

func RegisterGRPC_User_ServerServer(s grpc.ServiceRegistrar, srv GRPC_User_ServerServer) {
	s.RegisterService(&GRPC_User_Server_ServiceDesc, srv)
}

func _GRPC_User_Server_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPC_User_ServerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gRPC_User_Server/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPC_User_ServerServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPC_User_Server_ServiceDesc is the grpc.ServiceDesc for GRPC_User_Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPC_User_Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.gRPC_User_Server",
	HandlerType: (*GRPC_User_ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _GRPC_User_Server_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "User_Address.proto",
}

// GRPC_Address_ServerClient is the client API for GRPC_Address_Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPC_Address_ServerClient interface {
	// RPC method to get user address
	GetUserAddress(ctx context.Context, in *GetUserAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
}

type gRPC_Address_ServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPC_Address_ServerClient(cc grpc.ClientConnInterface) GRPC_Address_ServerClient {
	return &gRPC_Address_ServerClient{cc}
}

func (c *gRPC_Address_ServerClient) GetUserAddress(ctx context.Context, in *GetUserAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, "/proto.gRPC_Address_Server/GetUserAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPC_Address_ServerServer is the server API for GRPC_Address_Server service.
// All implementations must embed UnimplementedGRPC_Address_ServerServer
// for forward compatibility
type GRPC_Address_ServerServer interface {
	// RPC method to get user address
	GetUserAddress(context.Context, *GetUserAddressRequest) (*AddressResponse, error)
	mustEmbedUnimplementedGRPC_Address_ServerServer()
}

// UnimplementedGRPC_Address_ServerServer must be embedded to have forward compatible implementations.
type UnimplementedGRPC_Address_ServerServer struct {
}

func (UnimplementedGRPC_Address_ServerServer) GetUserAddress(context.Context, *GetUserAddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAddress not implemented")
}
func (UnimplementedGRPC_Address_ServerServer) mustEmbedUnimplementedGRPC_Address_ServerServer() {}

// UnsafeGRPC_Address_ServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPC_Address_ServerServer will
// result in compilation errors.
type UnsafeGRPC_Address_ServerServer interface {
	mustEmbedUnimplementedGRPC_Address_ServerServer()
}

func RegisterGRPC_Address_ServerServer(s grpc.ServiceRegistrar, srv GRPC_Address_ServerServer) {
	s.RegisterService(&GRPC_Address_Server_ServiceDesc, srv)
}

func _GRPC_Address_Server_GetUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPC_Address_ServerServer).GetUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gRPC_Address_Server/GetUserAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPC_Address_ServerServer).GetUserAddress(ctx, req.(*GetUserAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPC_Address_Server_ServiceDesc is the grpc.ServiceDesc for GRPC_Address_Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPC_Address_Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.gRPC_Address_Server",
	HandlerType: (*GRPC_Address_ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserAddress",
			Handler:    _GRPC_Address_Server_GetUserAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "User_Address.proto",
}
