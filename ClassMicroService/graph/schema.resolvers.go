package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"Class/graph/model"
	"Class/internal/auth"
	"context"
)

// CreateClass is the resolver for the createClass field.
func (r *mutationResolver) CreateClass(ctx context.Context, input model.ClassInput) (*model.Class, error) {
	token := auth.TokenFromContext(ctx)

	class, err := r.Service.CreateClass(token, input)
	if err != nil {
		return nil, err
	}

	return class, nil
}

// UpdateClass is the resolver for the updateClass field.
func (r *mutationResolver) UpdateClass(ctx context.Context, id string, input model.ClassInput) (*model.Class, error) {
	token := auth.TokenFromContext(ctx)

	class, err := r.Service.UpdateClass(token, id, input)
	if err != nil {
		return nil, err
	}

	return class, nil
}

// DeleteClass is the resolver for the deleteClass field.
func (r *mutationResolver) DeleteClass(ctx context.Context, id string) (*string, error) {
	token := auth.TokenFromContext(ctx)

	err := r.Service.DeleteClass(token, id)
	if err != nil {
		return nil, err
	}

	return &id, nil
}

// GetClass is the resolver for the getClass field.
func (r *queryResolver) GetClass(ctx context.Context, id string) (*model.Class, error) {
	token := auth.TokenFromContext(ctx)

	class, err := r.Service.GetClassById(token, id)
	if err != nil {
		return nil, err
	}

	return class, nil
}

// ListClasses is the resolver for the listClasses field.
func (r *queryResolver) ListClasses(ctx context.Context, filter *model.ListClassFilter, paginate *model.Paginator) ([]*model.ClassInfo, error) {
	token := auth.TokenFromContext(ctx)

	classes, err := r.Service.ListClasses(token, filter, paginate)
	if err != nil {
		return nil, err
	}

	return classes, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
