package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"example/graph/model"
	"fmt"
)

// CreateClass is the resolver for the createClass field.
func (r *mutationResolver) CreateClass(ctx context.Context, input model.ClassInput) (*model.Class, error) {
	panic(fmt.Errorf("not implemented: CreateClass - createClass"))
}

// UpdateClass is the resolver for the updateClass field.
func (r *mutationResolver) UpdateClass(ctx context.Context, id string, input model.ClassInput) (*model.Class, error) {
	panic(fmt.Errorf("not implemented: UpdateClass - updateClass"))
}

// DeleteClass is the resolver for the deleteClass field.
func (r *mutationResolver) DeleteClass(ctx context.Context, id string) (*string, error) {
	panic(fmt.Errorf("not implemented: DeleteClass - deleteClass"))
}

// GetClass is the resolver for the getClass field.
func (r *queryResolver) GetClass(ctx context.Context, id string) (*model.Class, error) {
	panic(fmt.Errorf("not implemented: GetClass - getClass"))
}

// ListClasses is the resolver for the listClasses field.
func (r *queryResolver) ListClasses(ctx context.Context) ([]*model.Class, error) {
	panic(fmt.Errorf("not implemented: ListClasses - listClasses"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
