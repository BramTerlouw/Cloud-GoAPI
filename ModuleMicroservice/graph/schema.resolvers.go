package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"Module/graph/model"
	"context"
	"github.com/google/uuid"
	"time"
)

func generateUniqueID() string {
	return uuid.New().String()
}

func currentTime() *string {
	currentTime := time.Now().Format(time.RFC3339)
	return &currentTime
}

// CreateModule is the resolver for the createModule field.
func (r *mutationResolver) CreateModule(ctx context.Context, input model.ModuleInput) (*model.Module, error) {

	newModule := &model.Module{
		ID:          generateUniqueID(), // You need to implement a function to generate a unique ID.
		Name:        input.Name,
		Description: input.Description,
		Difficulty:  input.Difficulty,
		Category:    input.Category,
		MadeBy:      input.MadeBy,
		Private:     input.Private,
		Key:         input.Key,
		CreatedAt:   currentTime(), // You can use a function to get the current time.
	}

	// Save the newModule to your data source using the repository.
	err := r.Repository.CreateModule(newModule)
	if err != nil {
		return nil, err
	}

	return newModule, nil
}

// UpdateModule is the resolver for the updateModule field.
func (r *mutationResolver) UpdateModule(ctx context.Context, id string, input model.ModuleInput) (*model.Module, error) {

	existingModule, err := r.Repository.GetModuleByID(id)
	if err != nil {
		return nil, err
	}

	// Save the updated module to your data source using the repository.
	err = r.Repository.UpdateModule(existingModule)
	if err != nil {
		return nil, err
	}

	return existingModule, nil
}

// DeleteModule is the resolver for the deleteModule field.
func (r *mutationResolver) DeleteModule(ctx context.Context, id string) (*string, error) {
	err := r.Repository.DeleteModuleByID(id)
	if err != nil {
		return nil, err
	}

	return &id, nil
}

// GetModule is the resolver for the getModule field.
func (r *queryResolver) GetModule(ctx context.Context, id string) (*model.Module, error) {
	// Fetch the module by ID using the repository.
	module, err := r.Repository.GetModuleByID(id)
	if err != nil {
		return nil, err
	}

	return module, nil
}

// ListModules is the resolver for the listModules field.
func (r *queryResolver) ListModules(ctx context.Context) ([]*model.Module, error) {
	// Retrieve a list of all modules using the repository.
	modules, err := r.Repository.ListModules()
	if err != nil {
		return nil, err
	}

	return modules, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
