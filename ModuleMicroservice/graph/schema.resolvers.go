package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"Module/graph/model"
	"Module/internal/auth"
	"context"
)

// CreateModule is the resolver for the createModule field.
func (r *mutationResolver) CreateModule(ctx context.Context, input model.ModuleInputCreate) (*model.Module, error) {
	token := auth.TokenFromContext(ctx)

	module, err := r.Service.CreateModule(token, input)
	if err != nil {
		return nil, err
	}

	return module, nil
}

// UpdateModule is the resolver for the updateModule field.
func (r *mutationResolver) UpdateModule(ctx context.Context, id string, input model.ModuleInputUpdate) (*model.Module, error) {
	token := auth.TokenFromContext(ctx)

	updatedModule, err := r.Service.UpdateModule(token, id, input)
	if err != nil {
		return nil, err
	}

	return updatedModule, nil
}

// GetModule is the resolver for the getModule field.
func (r *queryResolver) GetModule(ctx context.Context, id string) (*model.Module, error) {
	token := auth.TokenFromContext(ctx)

	module, err := r.Service.GetModuleById(token, id)
	if err != nil {
		return nil, err
	}

	return module, nil
}

// ListModules is the resolver for the listModules field.
func (r *queryResolver) ListModules(ctx context.Context, filter *model.ModuleFilter, paginate *model.Paginator) ([]*model.ModuleInfo, error) {
	token := auth.TokenFromContext(ctx)

	modules, err := r.Service.ListModules(token, filter, paginate)
	if err != nil {
		return nil, err
	}

	return modules, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
