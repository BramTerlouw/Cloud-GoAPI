package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"Module/graph/model"
	"Module/internal/auth"
	"context"
)

// CreateModule is the resolver for the createModule field.
func (r *mutationResolver) CreateModule(ctx context.Context, input model.ModuleInput) (*model.Module, error) {
	token := auth.TokenFromContext(ctx)

	err := r.Policy.CreateModule(token, input)
	if err != nil {
		return nil, err
	}

	module, err := r.Service.CreateModule(input)
	if err != nil {
		return nil, err
	}

	return module, nil
}

// UpdateModule is the resolver for the updateModule field.
func (r *mutationResolver) UpdateModule(ctx context.Context, id string, input model.ModuleInput) (*model.Module, error) {
	module, err := r.Service.UpdateModule(id, input)
	if err != nil {
		return nil, err
	}

	return module, nil
}

// DeleteModule is the resolver for the deleteModule field.
func (r *mutationResolver) DeleteModule(ctx context.Context, id string) (*string, error) {
	err := r.Service.DeleteModule(id)
	if err != nil {
		return nil, err
	}

	return &id, nil
}

// GetModule is the resolver for the getModule field.
func (r *queryResolver) GetModule(ctx context.Context, id string) (*model.Module, error) {
	module, err := r.Service.GetModuleById(id)
	if err != nil {
		return nil, err
	}

	return module, nil
}

// ListModules is the resolver for the listModules field.
func (r *queryResolver) ListModules(ctx context.Context) ([]*model.Module, error) {
	// Retrieve a list of all modules using the repository.
	modules, err := r.Service.ListModules()
	if err != nil {
		return nil, err
	}

	return modules, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
