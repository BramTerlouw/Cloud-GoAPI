package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"errors"
	"example/graph/model"
	"time"

	"github.com/google/uuid"
)

// CreateResult is the resolver for the createResult field.
func (r *mutationResolver) CreateResult(ctx context.Context, input *model.NewResult) (*model.Result, error) {
	timestamp := time.Now().String()
	softDeleted := false
	newResult := &model.Result{
		ID:          uuid.New().String(),
		ExerciseID:  input.ExerciseID,
		UserID:      input.UserID,
		ClassID:     input.ClassID,
		ModuleID:    input.ModuleID,
		Input:       input.Input,
		Result:      input.Result,
		CreatedAt:   &timestamp,
		SoftDeleted: &softDeleted,
	}

	r.results = append(r.results, newResult)

	return newResult, nil
}

// GetModule is the resolver for the getModule field.
func (r *queryResolver) GetModule(ctx context.Context, id string) (*model.Module, error) {
	if len(r.modules) == 0 {
		r.init()
	}

	for _, obj := range r.modules {
		if obj.ID == id {
			return obj, nil
		}
	}
	return nil, errors.New("no module wound with this id")
}

// ListModules is the resolver for the listModules field.
func (r *queryResolver) ListModules(ctx context.Context) ([]*model.ModuleInfo, error) {
	if len(r.modules) == 0 {
		r.init()
	}

	var slice []*model.ModuleInfo
	for _, module := range r.modules {
		moduleInfo := &model.ModuleInfo{
			ID:          module.ID,
			Name:        module.Name,
			Description: module.Description,
			Difficulty:  module.Difficulty,
			Category:    module.Category,
			MadeBy:      module.MadeBy,
			Private:     module.Private,
		}
		slice = append(slice, moduleInfo)
	}

	return slice, nil
}

// GetClass is the resolver for the getClass field.
func (r *queryResolver) GetClass(ctx context.Context, id string) (*model.Class, error) {
	if len(r.classes) == 0 {
		r.init()
	}

	for _, obj := range r.classes {
		if obj.ID == id {
			return obj, nil
		}
	}
	return nil, errors.New("no class wound with this id")
}

// ListClasses is the resolver for the listClasses field.
func (r *queryResolver) ListClasses(ctx context.Context) ([]*model.ClassInfo, error) {
	if len(r.classes) == 0 {
		r.init()
	}

	var slice []*model.ClassInfo
	for _, class := range r.classes {
		classInfo := &model.ClassInfo{
			ID:          class.ID,
			ModuleID:    class.ModuleID,
			Name:        class.Name,
			Description: class.Description,
			Difficulty:  class.Difficulty,
			MadeBy:      class.MadeBy,
		}
		slice = append(slice, classInfo)
	}

	return slice, nil
}

// GetExercise is the resolver for the getExercise field.
func (r *queryResolver) GetExercise(ctx context.Context, id string) (*model.Exercise, error) {
	if len(r.exercises) == 0 {
		r.init()
	}
	for _, obj := range r.exercises {
		if obj.ID == id {
			return obj, nil
		}
	}
	return nil, errors.New("no exercise wound with this id")
}

// ListExercises is the resolver for the listExercises field.
func (r *queryResolver) ListExercises(ctx context.Context) ([]*model.ExerciseInfo, error) {
	if len(r.exercises) == 0 {
		r.init()
	}

	var slice []*model.ExerciseInfo
	for _, exercise := range r.exercises {
		exerciseInfo := &model.ExerciseInfo{
			ID:               exercise.ID,
			ClassID:          exercise.ClassID,
			Name:             exercise.Name,
			Question:         exercise.Question,
			Answers:          exercise.Answers,
			PosCorrectAnswer: exercise.PosCorrectAnswer,
			QuestionTypeID:   exercise.QuestionTypeID,
			Difficulty:       exercise.Difficulty,
		}
		slice = append(slice, exerciseInfo)
	}

	return slice, nil
}

// GetResultsByClass is the resolver for the getResultsByClass field.
func (r *queryResolver) GetResultsByClass(ctx context.Context, classID string) ([]*model.Result, error) {
	if len(r.exercises) == 0 {
		r.init()
	}
	for _, obj := range r.results {
		if obj.ClassID == classID {
			return r.results, nil
		}
	}
	return nil, errors.New("no exercise wound with this id")
}

// GetLeaderBord is the resolver for the getLeaderBord field.
func (r *queryResolver) GetLeaderBord(ctx context.Context) ([]*model.LeaderboardRow, error) {
	if len(r.leaderboard) == 0 {
		r.init()
	}

	return r.leaderboard, nil
}

// GetSchool is the resolver for the getSchool field.
func (r *queryResolver) GetSchool(ctx context.Context, id string) (*model.School, error) {
	if len(r.schools) == 0 {
		r.init()
	}
	for _, obj := range r.schools {
		if obj.ID == id {
			return obj, nil
		}
	}
	return nil, errors.New("no school wound with this id")
}

// ListSchools is the resolver for the listSchools field.
func (r *queryResolver) ListSchools(ctx context.Context) ([]*model.SchoolInfo, error) {
	if len(r.schools) == 0 {
		r.init()
	}

	var slice []*model.SchoolInfo
	for _, school := range r.schools {
		schoolInfo := &model.SchoolInfo{
			ID:       school.ID,
			Name:     school.Name,
			Location: school.Location,
			MadeBy:   school.MadeBy,
		}
		slice = append(slice, schoolInfo)
	}

	return slice, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
