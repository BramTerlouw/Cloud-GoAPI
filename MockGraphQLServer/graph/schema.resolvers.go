package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"errors"
	"example/graph/model"
	"time"

	"github.com/google/uuid"
)

// CreateResult is the resolver for the createResult field.
func (r *mutationResolver) CreateResult(ctx context.Context, input *model.NewResult) (*model.Result, error) {
	newResult := &model.Result{
		ID:          uuid.New().String(),
		ExerciseID:  input.ExerciseID,
		UserID:      input.UserID,
		ClassID:     input.ClassID,
		ModuleID:    input.ModuleID,
		Input:       input.Input,
		Result:      input.Result,
		CreatedAt:   time.Now().String(),
		SoftDeleted: false,
	}

	r.results = append(r.results, newResult)

	return newResult, nil
}

// GetModule is the resolver for the getModule field.
func (r *queryResolver) GetModule(ctx context.Context, id string) (*model.Module, error) {
	if len(r.modules) == 0 {
		r.init()
	}

	for _, obj := range r.modules {
		if obj.ID == id {
			return obj, nil
		}
	}
	return nil, errors.New("no module wound with this id")
}

// ListModules is the resolver for the listModules field.
func (r *queryResolver) ListModules(ctx context.Context) ([]*model.Module, error) {
	if len(r.modules) == 0 {
		r.init()
	}

	return r.modules, nil
}

// GetClass is the resolver for the getClass field.
func (r *queryResolver) GetClass(ctx context.Context, id string) (*model.Class, error) {
	if len(r.classes) == 0 {
		r.init()
	}

	for _, obj := range r.classes {
		if obj.ID == id {
			return obj, nil
		}
	}
	return nil, errors.New("no class wound with this id")
}

// ListClasses is the resolver for the listClasses field.
func (r *queryResolver) ListClasses(ctx context.Context) ([]*model.Class, error) {
	if len(r.classes) == 0 {
		r.init()
	}

	return r.classes, nil
}

// GetExercise is the resolver for the getExercise field.
func (r *queryResolver) GetExercise(ctx context.Context, id string) (*model.Exercise, error) {
	if len(r.exercises) == 0 {
		r.init()
	}
	for _, obj := range r.exercises {
		if obj.ID == id {
			return obj, nil
		}
	}
	return nil, errors.New("no exercise wound with this id")
}

// ListExercises is the resolver for the listExercises field.
func (r *queryResolver) ListExercises(ctx context.Context) ([]*model.Exercise, error) {
	if len(r.exercises) == 0 {
		r.init()
	}

	return r.exercises, nil
}

// GetResultsByClass is the resolver for the getResultsByClass field.
func (r *queryResolver) GetResultsByClass(ctx context.Context, classID string) ([]*model.Result, error) {
	if len(r.exercises) == 0 {
		r.init()
	}
	for _, obj := range r.results {
		if obj.ModuleID == classID {
			return r.results, nil
		}
	}
	return nil, errors.New("no exercise wound with this id")
}

// GetLeaderBord is the resolver for the getLeaderBord field.
func (r *queryResolver) GetLeaderBord(ctx context.Context) ([]*model.LeaderboardRow, error) {
	if len(r.leaderboard) == 0 {
		r.init()
	}

	return r.leaderboard, nil
}

// GetSchool is the resolver for the getSchool field.
func (r *queryResolver) GetSchool(ctx context.Context, id string) (*model.School, error) {
	if len(r.schools) == 0 {
		r.init()
	}
	for _, obj := range r.schools {
		if obj.ID == id {
			return obj, nil
		}
	}
	return nil, errors.New("no school wound with this id")
}

// ListSchools is the resolver for the listSchools field.
func (r *queryResolver) ListSchools(ctx context.Context) ([]*model.School, error) {
	if len(r.schools) == 0 {
		r.init()
	}

	return r.schools, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
